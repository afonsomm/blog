[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html",
    "title": "fastai: Image Classifier",
    "section": "",
    "text": "from google.colab import drive\ndrive.mount('/content/drive')\n\nMounted at /content/drive\n%cd /content/drive/MyDrive/fastai course/Aula 1, 2 e 3.1\n\n/content/drive/MyDrive/fastai course/Aula 1, 2 e 3.1"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data",
    "title": "fastai: Image Classifier",
    "section": "Load Data",
    "text": "Load Data\n\ndef search_images(term, max_images=30):\n    print(f\"Searching for '{term}'\")\n    return L(DDGS().images(keywords=term, max_results=max_images)).itemgot('image')\n\nLet’s start by searching for a bird photo and seeing what kind of result we get. We’ll start by getting URLs from a search:\n\ndata_path = Path(\"./data/lesson1\")\ndata_path.mkdir(parents=True, exist_ok=True)\n\n\nbird_urls = search_images('bird photo', max_images=1)\ndownload_url(bird_urls[0], data_path/\"bird.jpg\", show_progress=False)\nim = Image.open(data_path/\"bird.jpg\")\nim.to_thumb(256,256)\n\nSearching for 'bird photo'\n\n\n\n\n\n\n\n\n\nNow let’s do the same with “forest photos”:\n\nforest_urls = search_images('forest photo', max_images=1)\ndownload_url(forest_urls[0], data_path/\"forest.jpg\", show_progress=False)\nim = Image.open(data_path/\"forest.jpg\")\nim.to_thumb(256,256)\n\nSearching for 'forest photo'\n\n\n\n\n\n\n\n\n\nNow let’s do the same with “cat photo”, “dog photo”, and “wolf photo”:\n\ncat_urls = search_images('cat photo', max_images=1)\ndownload_url(cat_urls[0], data_path/\"cat.jpg\", show_progress=False)\nim = Image.open(data_path/\"cat.jpg\")\nim.to_thumb(256,256)\n\nSearching for 'cat photo'\n\n\n\n\n\n\n\n\n\n\ndog_urls = search_images('dog photo', max_images=1)\ndownload_url(dog_urls[0], data_path/\"dog.jpg\", show_progress=False)\nim = Image.open(data_path/\"dog.jpg\")\nim.to_thumb(256,256)\n\nSearching for 'dog photo'\n\n\n\n\n\n\n\n\n\n\nwolf_urls = search_images('wolf photo', max_images=1)\ndownload_url(wolf_urls[0], data_path/\"wolf.jpg\", show_progress=False)\nim = Image.open(data_path/\"wolf.jpg\")\nim.to_thumb(256,256)\n\nSearching for 'wolf photo'\n\n\n\n\n\n\n\n\n\nOur searches seem to be giving reasonable results, so let’s grab a few examples of each, and save each group of photos to a different folder (I’m also trying to grab a range of lighting conditions here):\n\nsearches = 'forest','bird','cat','dog','wolf'\nimgs_path = data_path/\"imgs\"\nfrom time import sleep\n\nfor o in searches:\n    dest = imgs_path/f\"{o}\"\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'{o} photo'))\n    sleep(10)  # Pause between searches to avoid over-loading server\n    download_images(dest, urls=search_images(f'{o} photo sun'))\n    sleep(10)\n    download_images(dest, urls=search_images(f'{o} photo shade'))\n    sleep(10)\n    resize_images(path/o, max_size=400, dest=path/o)\n\nSearching for 'forest photo'\nSearching for 'forest photo sun'\nSearching for 'forest photo shade'\nSearching for 'bird photo'\nSearching for 'bird photo sun'\nSearching for 'bird photo shade'\nSearching for 'cat photo'\nSearching for 'cat photo sun'\nSearching for 'cat photo shade'\nSearching for 'dog photo'\nSearching for 'dog photo sun'\nSearching for 'dog photo shade'\nSearching for 'wolf photo'\nSearching for 'wolf photo sun'\nSearching for 'wolf photo shade'"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model",
    "title": "fastai: Image Classifier",
    "section": "Train Model",
    "text": "Train Model\nSome photos might not download correctly which could cause our model training to fail, so we’ll remove them:\n\nfailed = verify_images(get_image_files(imgs_path))\nfailed.map(Path.unlink)\nlen(failed)\n\n14\n\n\nTo train a model, we’ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model – not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it:\n\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                get_items=get_image_files,\n                splitter=RandomSplitter(valid_pct=0.2, seed=0),\n                get_y=parent_label,\n                item_tfms=[Resize(192, method=\"squish\")]\n               ).dataloaders(imgs_path)\n\ndls.show_batch(max_n=6)\n\n\n\n\n\n\n\n\nHere what each of the DataBlock parameters means:\nblocks=(ImageBlock, CategoryBlock), - The inputs to our model are images, and the outputs are categories (in this case, “forest”, “bird”, “cat”, “dog” or “wolf”).\nget_items=get_image_files, - To find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path).\nsplitter=RandomSplitter(valid_pct=0.2, seed=42), - Split the data into training and validation sets randomly, using 20% of the data for the validation set.\nget_y=parent_label, - The labels (y values) is the name of the parent of each file (i.e. the name of the folder they’re in, which will be “forest”, “bird”, “cat”, “dog” or “wolf”).\nitem_tfms=[Resize(192, method='squish')] - Before training, resize each image to 192x192 pixels by “squishing” it (as opposed to cropping it).\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.004911\n0.474476\n0.192771\n00:49\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.505954\n0.225417\n0.096386\n00:48\n\n\n1\n0.326397\n0.217455\n0.084337\n00:48\n\n\n2\n0.236130\n0.237563\n0.096386\n00:48\n\n\n\n\n\n\n“Fine-tuning” a model means that we’re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it’s important, check out the free free fast.ai course."
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model",
    "title": "fastai: Image Classifier",
    "section": "Test Model",
    "text": "Test Model\nLet’s see what our model thinks about that bird we downloaded at the start:\n\nis_bird,_,probs = learn.predict(PILImage.create(data_path/'bird.jpg'))\nprint(f\"This is a: {is_bird}.\")\nprint(f\"Probability it's a bird: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: bird.\nProbability it's a bird: 0.9998\n\n\nGood job, resnet18. :)\nSo, as you see, in the space of a few years, creating computer vision classification models has gone from “so hard it’s a joke” to “trivially easy and free”!\nIt’s not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including creating amazing artworks, and explaining jokes. It’s moving so fast that even experts in the field have trouble predicting how it’s going to impact society in the coming years.\nOne thing is clear – it’s important that we all do our best to understand this technology, because otherwise we’ll get left behind!"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#timm",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#timm",
    "title": "fastai: Image Classifier",
    "section": "timm",
    "text": "timm\nPyTorch Image Models (timm) is a wonderful library by Ross Wightman which provides state-of-the-art pre-trained computer vision models. It’s like Huggingface Transformers, but for computer vision instead of NLP (and it’s not restricted to transformers-based models)!\nRoss has been kind enough to help me understand how to best take advantage of this library by identifying the top models. I’m going to share here so of what I’ve learned from him, plus some additional ideas."
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#the-data",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#the-data",
    "title": "fastai: Image Classifier",
    "section": "The data",
    "text": "The data\nRoss regularly benchmarks new models as they are added to timm, and puts the results in a CSV in the project’s GitHub repo. To analyse the data, we’ll first clone the repo:\n\n! git clone --depth 1 https://github.com/rwightman/pytorch-image-models.git\n%cd pytorch-image-models/results\n\nfatal: destination path 'pytorch-image-models' already exists and is not an empty directory.\n/content/drive/MyDrive/fastai course/Aula 1, 2 e 3.1/pytorch-image-models/results\n\n\nUsing Pandas, we can read the two CSV files we need, and merge them together.\n\nimport pandas as pd\ndf_results = pd.read_csv('results-imagenet.csv')\n\n\ndf_results['model_org'] = df_results['model']\ndf_results['model'] = df_results['model'].str.split('.').str[0]\n\nWe’ll also add a “family” column that will allow us to group architectures into categories with similar characteristics:\nRoss has told me which models he’s found the most usable in practice, so I’ll limit the charts to just look at these. (I also include VGG, not because it’s good, but as a comparison to show how far things have come in the last few years.)\n\ndef get_data(part, col):\n    df = pd.read_csv(f'benchmark-{part}-amp-nhwc-pt111-cu113-rtx3090.csv').merge(df_results, on='model')\n    df['secs'] = 1. / df[col]\n    df['family'] = df.model.str.extract('^([a-z]+?(?:v2)?)(?:\\d|_|$)')\n    df = df[~df.model.str.endswith('gn')]\n    df.loc[df.model.str.contains('in22'),'family'] = df.loc[df.model.str.contains('in22'),'family'] + '_in22'\n    df.loc[df.model.str.contains('resnet.*d'),'family'] = df.loc[df.model.str.contains('resnet.*d'),'family'] + 'd'\n    return df[df.family.str.contains('^re[sg]netd?|beit|convnext|levit|efficient|vit|vgg|swin')]\n\n\ndf = get_data('infer', 'infer_samples_per_sec')"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#inference-results",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#inference-results",
    "title": "fastai: Image Classifier",
    "section": "Inference results",
    "text": "Inference results\nHere’s the results for inference performance (see the last section for training performance). In this chart:\n\nthe x axis shows how many seconds it takes to process one image (note: it’s a log scale)\nthe y axis is the accuracy on Imagenet\nthe size of each bubble is proportional to the size of images used in testing\nthe color shows what “family” the architecture is from.\n\nHover your mouse over a marker to see details about the model. Double-click in the legend to display just one family. Single-click in the legend to show or hide a family.\nNote: on my screen, Kaggle cuts off the family selector and some plotly functionality – to see the whole thing, collapse the table of contents on the right by clicking the little arrow to the right of “Contents”.\n\nimport plotly.express as px\nw,h = 1000,800\n\ndef show_all(df, title, size):\n    return px.scatter(df, width=w, height=h, size=df[size]**2, title=title,\n        x='secs',  y='top1', log_x=True, color='family', hover_name='model_org', hover_data=[size])\n\n\nshow_all(df, 'Inference', 'infer_img_size')\n\n\n\n\n                                \n                                            \n\n\n\n\nThat number of families can be a bit overwhelming, so I’ll just pick a subset which represents a single key model from each of the families that are looking best in our plot. I’ve also separated convnext models into those which have been pretrained on the larger 22,000 category imagenet sample (convnext_in22) vs those that haven’t (convnext). (Note that many of the best performing models were trained on the larger sample – see the papers for details before coming to conclusions about the effectiveness of these architectures more generally.)\n\nsubs = 'levit|resnetd?|regnetx|vgg|convnext.*|efficientnetv2|beit|swin'\n\nIn this chart, I’ll add lines through the points of each family, to help see how they compare – but note that we can see that a linear fit isn’t actually ideal here! It’s just there to help visually see the groups.\n\ndef show_subs(df, title, size):\n    df_subs = df[df.family.str.fullmatch(subs)]\n    return px.scatter(df_subs, width=w, height=h, size=df_subs[size]**2, title=title,\n        trendline=\"ols\", trendline_options={'log_x':True},\n        x='secs',  y='top1', log_x=True, color='family', hover_name='model_org', hover_data=[size])\n\n\nshow_subs(df, 'Inference', 'infer_img_size')\n\n\n\n\n                                \n                                            \n\n\n\n\nFrom this, we can see that the levit family models are extremely fast for image recognition, and clearly the most accurate amongst the faster models. That’s not surprising, since these models are a hybrid of the best ideas from CNNs and transformers, so get the benefit of each. In fact, we see a similar thing even in the middle category of speeds – the best is the ConvNeXt, which is a pure CNN, but which takes advantage of ideas from the transformers literature.\nFor the slowest models, beit is the most accurate – although we need to be a bit careful of interpreting this, since it’s trained on a larger dataset (ImageNet-21k, which is also used for vit models).\nI’ll add one other plot here, which is of speed vs parameter count. Often, parameter count is used in papers as a proxy for speed. However, as we see, there is a wide variation in speeds at each level of parameter count, so it’s really not a useful proxy.\n(Parameter count may be be useful for identifying how much memory a model needs, but even for that it’s not always a great proxy.)\n\npx.scatter(df, width=w, height=h,\n    x='param_count_x',  y='secs', log_x=True, log_y=True, color='infer_img_size',\n    hover_name='model_org', hover_data=['infer_samples_per_sec', 'family']\n)"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#training-results",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#training-results",
    "title": "fastai: Image Classifier",
    "section": "Training results",
    "text": "Training results\nWe’ll now replicate the above analysis for training performance. First we grab the data:\n\ntdf = get_data('train', 'train_samples_per_sec')\n\nNow we can repeat the same family plot we did above:\n\nshow_all(tdf, 'Training', 'train_img_size')\n\n\n\n\n                                \n                                            \n\n\n\n\n…and we’ll also look at our chosen subset of models:\n\nshow_subs(tdf, 'Training', 'train_img_size')\n\n\n\n\n                                \n                                            \n\n\n\n\nFinally, we should remember that speed depends on hardware. If you’re using something other than a modern NVIDIA GPU, your results may be different. In particular, I suspect that transformers-based models might have worse performance in general on CPUs (although I need to study this more to be sure)."
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#use-model",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#use-model",
    "title": "fastai: Image Classifier",
    "section": "Use model",
    "text": "Use model\n\n%cd ../..\n\n/content/drive/MyDrive/fastai course/Aula 1, 2 e 3.1\n\n\n\n!pip install -Uqq timm\n\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.2/2.2 MB 9.2 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 23.7/23.7 MB 30.2 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 823.6/823.6 kB 34.0 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 14.1/14.1 MB 17.9 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 731.7/731.7 MB 578.9 kB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 410.6/410.6 MB 927.3 kB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 121.6/121.6 MB 1.3 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 56.5/56.5 MB 1.3 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 124.2/124.2 MB 1.5 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 196.0/196.0 MB 1.4 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 166.0/166.0 MB 975.8 kB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 99.1/99.1 kB 1.4 MB/s eta 0:00:00\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 21.1/21.1 MB 1.3 MB/s eta 0:00:00\n\n\n\nfrom fastai.vision.all import *\nimport timm\n\n\npath = untar_data(URLs.PETS)/\"images\"\n\n\ndef is_cat(x): return x.name[0].isupper()\n\n\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                get_items=get_image_files,\n                splitter=RandomSplitter(valid_pct=0.2, seed=42),\n                get_y=is_cat, item_tfms=Resize(192)\n               ).dataloaders(path)\n\n\ndls.show_batch()\n\n\n\n\n\n\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\nDownloading: \"https://download.pytorch.org/models/resnet18-f37072fd.pth\" to /root/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth\n100%|██████████| 44.7M/44.7M [00:01&lt;00:00, 34.9MB/s]\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.199996\n0.070748\n0.023004\n00:49\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.076861\n0.030587\n0.010149\n00:40\n\n\n1\n0.040507\n0.031452\n0.010149\n00:42\n\n\n2\n0.021061\n0.025538\n0.008796\n00:42\n\n\n\n\n\n\n\ntimm.list_models(\"convnext*\")\n\n['convnext_atto',\n 'convnext_atto_ols',\n 'convnext_base',\n 'convnext_femto',\n 'convnext_femto_ols',\n 'convnext_large',\n 'convnext_large_mlp',\n 'convnext_nano',\n 'convnext_nano_ols',\n 'convnext_pico',\n 'convnext_pico_ols',\n 'convnext_small',\n 'convnext_tiny',\n 'convnext_tiny_hnf',\n 'convnext_xlarge',\n 'convnext_xxlarge',\n 'convnextv2_atto',\n 'convnextv2_base',\n 'convnextv2_femto',\n 'convnextv2_huge',\n 'convnextv2_large',\n 'convnextv2_nano',\n 'convnextv2_pico',\n 'convnextv2_small',\n 'convnextv2_tiny']\n\n\n\nlearn = vision_learner(dls, \"convnext_tiny.fb_in22k\", metrics=error_rate).to_fp16()\nlearn.fine_tune(3)\n\n/usr/local/lib/python3.10/dist-packages/timm/models/_factory.py:117: UserWarning:\n\nMapping deprecated model name convnext_tiny_in22k to current convnext_tiny.fb_in22k.\n\n/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning:\n\n\nThe secret `HF_TOKEN` does not exist in your Colab secrets.\nTo authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\nYou will be able to reuse this secret in all of your notebooks.\nPlease note that authentication is recommended but still optional to access public models or datasets.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.059403\n0.011887\n0.003383\n00:45\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.011285\n0.010708\n0.003383\n00:44\n\n\n1\n0.011494\n0.013424\n0.004736\n00:45\n\n\n2\n0.003962\n0.008315\n0.002706\n00:45\n\n\n\n\n\n\n\nThe convnext model increased the performance of the resnet18 model by 225% (form 0.0088 error rate to 0.0027), while minimaly increasing training duration (~4 seconds per epoch)."
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data-1",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data-1",
    "title": "fastai: Image Classifier",
    "section": "Load Data",
    "text": "Load Data\n\nimport numpy as np\nimport pandas as pd\n\n\ntrain_df = pd.read_csv(\"./data/mnist/train.csv\")\ntest_df = pd.read_csv(\"./data/mnist/test.csv\")\n\n\ndisplay(train_df.head(2))\ndisplay(test_df.head(2))\n\n\n\n\n\n\n\n\n\nlabel\npixel0\npixel1\npixel2\npixel3\npixel4\npixel5\npixel6\npixel7\npixel8\n...\npixel774\npixel775\npixel776\npixel777\npixel778\npixel779\npixel780\npixel781\npixel782\npixel783\n\n\n\n\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n2 rows × 785 columns\n\n\n\n\n\n\n\n\n\n\n\n\npixel0\npixel1\npixel2\npixel3\npixel4\npixel5\npixel6\npixel7\npixel8\npixel9\n...\npixel774\npixel775\npixel776\npixel777\npixel778\npixel779\npixel780\npixel781\npixel782\npixel783\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n2 rows × 784 columns\n\n\n\n\n\ndef get_X_y(df: pd.DataFrame,\n            train: bool,\n            frac: float = None,\n            random_state: int = None):\n\n    if train:\n        sample_df = df.groupby(\"label\").sample(frac=frac, random_state=random_state)\n        X, y = sample_df.iloc[:, 1:].values, sample_df.iloc[:, 0].values\n    else:\n        X = df.values\n        y = None\n\n    X = X.reshape(-1, 28, 28).astype(np.uint8)\n    return np.moveaxis(np.stack((X,) * 3, axis=1), source=1, destination=-1), y\n\n\ntrain_X, train_y = get_X_y(train_df, train=True, frac=0.05, random_state=0)\ntest_X, _ = get_X_y(test_df, train=False)\n\n\nimport os\n\ntrain_dir = \"./data/mnist/train\"\ntest_dir = \"./data/mnist/test\"\n\nif not os.path.exists(train_dir):\n    os.mkdir(train_dir)\nif not os.path.exists(test_dir):\n    os.mkdir(test_dir)\n\nfor label in np.unique(train_y):\n    if not os.path.exists(f\"{train_dir}/{label}\"):\n        os.mkdir(f\"{train_dir}/{label}\")\n\n\nfrom PIL import Image\n\nfor i in range(train_X.shape[0]):\n    Image.fromarray(train_X[i]).save(f\"{train_dir}/{train_y[i]}/{i}.jpg\")\n\nfor i in range(test_X.shape[0]):\n    Image.fromarray(test_X[i]).save(f\"{test_dir}/{i}.jpg\")"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model-1",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model-1",
    "title": "fastai: Image Classifier",
    "section": "Train Model",
    "text": "Train Model\n\nfrom fastai.vision.all import *\n\n\ndls = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                get_items = get_image_files,\n                get_y = parent_label,\n                splitter = RandomSplitter()\n               ).dataloaders(train_dir)\n\n\ndls.show_batch()\n\n\n\n\n\n\n\n\n\ndls.n\n\n1681\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(10)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.799451\n1.431905\n0.459524\n00:07\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.452900\n1.000913\n0.314286\n00:08\n\n\n1\n1.127767\n0.726985\n0.219048\n00:08\n\n\n2\n0.822714\n0.569272\n0.164286\n00:08\n\n\n3\n0.580217\n0.472451\n0.142857\n00:08\n\n\n4\n0.394636\n0.403461\n0.116667\n00:08\n\n\n5\n0.281271\n0.356165\n0.102381\n00:08\n\n\n6\n0.194676\n0.374367\n0.109524\n00:08\n\n\n7\n0.137263\n0.370997\n0.107143\n00:08\n\n\n8\n0.103021\n0.350598\n0.104762\n00:08\n\n\n9\n0.083260\n0.356768\n0.107143\n00:08\n\n\n\n\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(5, nrows=1, figsize=(17,4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can correct images annotations or remove them, using the ImageClassifierCleaner. That will show the images for each class (in the train or validation set) where the trained model had the highest classification error. Let’s import the required modules:\n\nfrom fastai.vision.widgets import *\n\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach time we make a change in one class’s and data set’s (train/validation) samples, by reannotating/removing it, we need to run the following lines before changing to another class or data set, so the changes are applied to the actual data:\n\nfor ind in cleaner.delete(): cleaner.fns[ind].unlink()\nfor ind, cat in cleaner.change(): shutil.move(str(cleaner.fns[ind]), f\"{train_dir}/{cat}\")\n\nIn the end of validating the data, we need to create a new DataLoaders object, to reflect the changes made to the dataset, and retrain the model.\n\ndls = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                get_items = get_image_files,\n                get_y = parent_label,\n                splitter = RandomSplitter()\n               ).dataloaders(train_dir)\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(10)\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.888510\n1.503774\n0.525301\n00:07\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.519504\n1.011998\n0.330120\n00:07\n\n\n1\n1.199548\n0.672037\n0.221687\n00:07\n\n\n2\n0.866976\n0.474139\n0.137349\n00:07\n\n\n3\n0.597648\n0.332307\n0.101205\n00:07\n\n\n4\n0.420963\n0.318540\n0.096386\n00:07\n\n\n5\n0.295351\n0.311173\n0.086747\n00:07\n\n\n6\n0.213994\n0.280651\n0.081928\n00:07\n\n\n7\n0.154817\n0.255272\n0.067470\n00:07\n\n\n8\n0.112886\n0.267510\n0.069880\n00:07\n\n\n9\n0.089455\n0.275279\n0.077108\n00:07\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndls.n\n\n1662"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model-1",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model-1",
    "title": "fastai: Image Classifier",
    "section": "Test Model",
    "text": "Test Model\n\npd.read_csv(\"./data/mnist/sample_submission.csv\").head()\n\n\n\n\n\n\n\n\n\nImageId\nLabel\n\n\n\n\n0\n1\n0\n\n\n1\n2\n0\n\n\n2\n3\n0\n\n\n3\n4\n0\n\n\n4\n5\n0\n\n\n\n\n\n\n\n\n\ntest_dl = dls.test_dl(get_image_files(test_dir))\npreds_probs = learn.get_preds(dl=test_dl)[0]  # probs\n\n\n\n\n\n\n\n\n\npreds = pd.Series(preds_probs.max(axis=1).indices, name=\"Label\")\nids = pd.Series(data=[int(item.name[:-4])+1 for item in test_dl.dataset.items], name=\"ImageId\")\n\n\nsubmission_df = pd.concat((ids, preds), axis=1).sort_values(by=\"ImageId\")\n\n\nsubmission_df.head()\n\n\n\n\n\n\n\n\n\nImageId\nLabel\n\n\n\n\n27898\n1\n2\n\n\n26377\n2\n0\n\n\n24566\n3\n8\n\n\n26165\n4\n9\n\n\n21011\n5\n3\n\n\n\n\n\n\n\n\n\nsubmission_df.to_csv(\"./data/mnist/submission.csv\", index=False)\n\nWe only used 5% of the data for training and validation, to make it faster, so, after iterating this process enough to be confident of our data processing and validation methods, and our model’s architecture and hypeparameters, we would retrain and validate it on the whole dataset.\n\nfrom shutil import rmtree\n\nrmtree(train_dir)\nrmtree(test_dir)"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data-2",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#load-data-2",
    "title": "fastai: Image Classifier",
    "section": "Load Data",
    "text": "Load Data\n\nimport pandas as pd\n\n\nlabels = pd.read_csv(\"./data/animals/train-labels.csv\")\n\n\nlabels.head(2)\n\n\n\n\n\n\n\n\n\nid\nantelope_duiker\nbird\nblank\ncivet_genet\nhog\nleopard\nmonkey_prosimian\nrodent\n\n\n\n\n0\nZJ000000\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n1\nZJ000001\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n\n\n\n\n\n\n\n\n\nlabels[\"label\"] = labels.iloc[:, 1:].idxmax(axis=1).values\nlabels = labels[[\"id\", \"label\"]].set_index(\"id\")\n\n\ndisplay(labels.head(2))\nprint(labels.shape)\n\n\n\n\n\n\n\n\n\nlabel\n\n\nid\n\n\n\n\n\nZJ000000\nbird\n\n\nZJ000001\nmonkey_prosimian\n\n\n\n\n\n\n\n\n(16488, 1)\n\n\n\nlabels_sample = labels.groupby(\"label\").sample(frac=0.05)[\"label\"]\n\n\nlabels_sample\n\nid\nZJ009857    antelope_duiker\nZJ006205    antelope_duiker\nZJ015289    antelope_duiker\nZJ002203    antelope_duiker\nZJ008486    antelope_duiker\n                 ...       \nZJ012387             rodent\nZJ008316             rodent\nZJ012197             rodent\nZJ004787             rodent\nZJ007973             rodent\nName: label, Length: 826, dtype: object"
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model-2",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#train-model-2",
    "title": "fastai: Image Classifier",
    "section": "Train Model",
    "text": "Train Model\n\nfrom fastai.vision.all import *\n\n\ntrain_path = \"./data/animals/train/\"\ntest_path = \"./data/animals/test/\"\n\n\ndef get_items(path):\n\n    path = Path(path)\n    res = []\n\n    for filename in os.listdir(path):\n        if filename[:-4] in labels_sample.index:\n            res.append(path/filename)\n\n    return L(res)\n\n\ndls = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                get_items=get_items,\n                get_y=lambda x: labels_sample.loc[x.name[:-4]],\n                splitter=RandomSplitter(),\n                item_tfms=Resize(128, method=\"squish\"),\n                batch_tfms=[Normalize.from_stats(*imagenet_stats)]\n               ).dataloaders(train_path)\n\n\ndls.show_batch()\n\n\n\n\n\n\n\n\n\ndls.n\n\n661\n\n\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(10)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n3.050437\n2.190669\n0.696970\n00:10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.883267\n1.707361\n0.551515\n00:12\n\n\n1\n1.671480\n1.513506\n0.436364\n00:12\n\n\n2\n1.359095\n1.500973\n0.460606\n00:12\n\n\n3\n1.100571\n1.569371\n0.448485\n00:11\n\n\n4\n0.877178\n1.688496\n0.460606\n00:11\n\n\n5\n0.698931\n1.693306\n0.478788\n00:11\n\n\n6\n0.563536\n1.697963\n0.430303\n00:11\n\n\n7\n0.463716\n1.748586\n0.448485\n00:11\n\n\n8\n0.376198\n1.744868\n0.448485\n00:11\n\n\n9\n0.311529\n1.747836\n0.454545\n00:11\n\n\n\n\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(k=5, nrows=1, figsize=(22,4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom fastai.vision.widgets import *\n\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can’t see enough to validate the images."
  },
  {
    "objectID": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model-2",
    "href": "posts/fastai-img-classif/fastai-img-classif-2.html#test-model-2",
    "title": "fastai: Image Classifier",
    "section": "Test Model",
    "text": "Test Model\n\npd.read_csv(\"./data/animals/sample-submission.csv\").head()\n\n\n\n\n\n\n\n\n\nid\nantelope_duiker\nbird\nblank\ncivet_genet\nhog\nleopard\nmonkey_prosimian\nrodent\n\n\n\n\n0\nZJ016488\n0.048233\n0.189185\n0.044914\n0.199588\n0.106118\n0.132915\n0.166410\n0.112637\n\n\n1\nZJ016489\n0.097078\n0.061400\n0.026409\n0.241530\n0.144344\n0.051780\n0.287811\n0.089648\n\n\n2\nZJ016490\n0.124658\n0.089101\n0.189225\n0.174494\n0.180540\n0.079995\n0.085672\n0.076314\n\n\n3\nZJ016491\n0.109966\n0.048397\n0.055598\n0.323600\n0.322356\n0.063252\n0.008160\n0.068671\n\n\n4\nZJ016492\n0.165742\n0.184610\n0.005431\n0.136806\n0.000389\n0.122078\n0.151521\n0.233423\n\n\n\n\n\n\n\n\n\ntest_dl = dls.test_dl(get_image_files(test_path))\npreds_probs = learn.get_preds(dl=test_dl)[0]\n\n\n\n\n\n\n\n\n\nids = np.array([item.name[:-4] for item in test_dl.dataset.items])\n\n\nlearn.dls.vocab\n\n['antelope_duiker', 'bird', 'blank', 'civet_genet', 'hog', 'leopard', 'monkey_prosimian', 'rodent']\n\n\n\nsubmission_df = pd.DataFrame(data=preds_probs, columns= learn.dls.vocab)\nsubmission_df.insert(0, \"id\", ids)\nsubmission_df.sort_values(by=\"id\", inplace=True)\n\n\nsubmission_df.head()\n\n\n\n\n\n\n\n\n\nid\nantelope_duiker\nbird\nblank\ncivet_genet\nhog\nleopard\nmonkey_prosimian\nrodent\n\n\n\n\n1901\nZJ016488\n0.003612\n6.942989e-04\n0.323665\n5.332318e-01\n0.020963\n0.100759\n1.180175e-02\n0.005273\n\n\n1693\nZJ016489\n0.026071\n8.592082e-02\n0.024220\n4.086171e-03\n0.834774\n0.011074\n1.285491e-02\n0.000999\n\n\n2752\nZJ016490\n0.030828\n5.230120e-02\n0.045449\n1.384969e-01\n0.718519\n0.003206\n7.886172e-03\n0.003315\n\n\n2542\nZJ016491\n0.000002\n8.615297e-08\n0.000002\n3.867934e-07\n0.000002\n0.999990\n9.170705e-07\n0.000002\n\n\n2254\nZJ016492\n0.500051\n1.019086e-02\n0.049266\n3.648468e-02\n0.045658\n0.003554\n3.501456e-01\n0.004649\n\n\n\n\n\n\n\n\n\nsubmission_df.to_csv(\"./data/animals/submission.csv\", index=False)"
  },
  {
    "objectID": "posts/git/git.html",
    "href": "posts/git/git.html",
    "title": "Git",
    "section": "",
    "text": "This post follows the Learning Git Branching game, in which we use git commands to reach the desired state for the git repository at each level.\nLet’s get to the same stage as the beginning of the game.\n\nFirst, we need to create a local git repository:\n\n\n!mkdir example\n%cd example\n!ls -la; git init\n\n/Users/afonsomm/blog/posts/git/example\ntotal 0\ndrwxr-xr-x@ 2 afonsomm  staff   64 Apr 16 11:44 .\ndrwxr-xr-x  8 afonsomm  staff  256 Apr 16 11:44 ..\nInitialized empty Git repository in /Users/afonsomm/blog/posts/git/example/.git/\n\n\n\nWe created a directory “example” with an empty git repository (using the git init command).\n\n\n\nSidenote: In notebooks, the syntax !command opens a new shell in a different process, executes the command in that shell, and terminates the process running it right after, while the %command syntax is used for magic commands, which are specified by the IPython kernel, including some shell commands such as cd, and also timing commands, plotting, etc. Suppose we want to change to a given directory in a lasting way. In that case, we need to run the %command, since with the !command, the current process will be unchanged, and the directory is changed on the newly created one, which also terminates right after command execution is over.\n\n\n\nNow, let’s add our first change to the repository:\n\n\n!echo \"hello world\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C0\"\n\n[main (root-commit) 4abe474] C0\n 1 file changed, 1 insertion(+)\n create mode 100644 file.txt\n\n\n\nHere, we created a text file “file.txt” containing “hello world”. Then we staged that file using the git add command, which means “add the mentioned changed files/directories (in this case”file.txt”) in their current state to the list of changes to be commited”. Finally, we used the git commit command to take a snapshot of all the tracked files in our working directory (i.e., the one where “.git” is located, in this case, “./example”).\n\n\n!git log --all --graph --decorate\n\n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770 (HEAD -&gt; main)\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nThe git log command allows us to see the entire history of commits for the current branch we are in (in this case, “main”). A branch is a pointer to a given commit. If we add the --all flag, we print out the commit history for every branch. With the --graph flag, we visualize the commits with dashed lines indicating what is/are the previous commit(s) a given commit depends on, meaning what are its ancestor commits. With the --decorate flag, we give some colors to the output and print out to which commit each branch is pointing and which commit we are currently checking out, defined by the HEAD pointer. However, for new versions of git, using this flag does not make a difference in the output.\n\n\n\nSidenote: when the HEAD pointer is not pointing to the same commit where a branch is pointing to, then it is called detached (HEAD).\n\n\n\n!echo \"hello world changed\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C1\"\n\n[main d6f8c4c] C1\n 1 file changed, 1 insertion(+)\n\n\n\n!git log --all --graph --decorate\n\n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (HEAD -&gt; main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nLevel 1\n\nTo accomplish this level, we need to make a change in the working directory, stage that change, and commit it 2 times:\n\n\n!echo \"hello world changed 1\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C2\"\n!echo \"hello world changed 2\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C3\"\n\n[main eadba0c] C2\n 1 file changed, 1 insertion(+)\n[main aa84653] C3\n 1 file changed, 1 insertion(+)\n\n\n\n!git log --all --graph --decorate\n\n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f (HEAD -&gt; main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!cat file.txt\n\nhello world\nhello world changed\nhello world changed 1\nhello world changed 2\n\n\n\n\nLevel 2\n\nNow we need to get back to the 2 commit state of our repository, as we were at the beginning of level 1. To do that, we have to roll back to the “C1” commit and throw away the subsequent ones (“C2” and “C3”). We can do that using the git reset &lt;commit-id&gt; command and we can execute in three main ways:\n\nUsing the --soft flag which moves the branch where HEAD is pointing to the specified commit, but keeps the Index and Working Directory intact, meaning the changes made after the specified commit are staged but not commited.\nUsing the --mixed flag (default), which also updates the Index (the proposed next commit) with the contents of that commit, but does not update the Working Directory, so we need to specify which changes we want to stage.\nUsing the --hard flag, which also updates the Working Directory, meaning the changes made in subsequent commits after the one specified are thrown away, for the current branch (where HEAD is pointing to). In this case, if we reset to commit “C1” while HEAD is pointing to “main”, since no other branches are pointing to subsequent commits after “C1”, these become untracked and so are completely thrown away, which is what we want.\n\n\n\n\nSidenote: The Index is a file (“.git/index”) that has the file contents that were checked out into the working directory (1) and what they looked like when they were initially checked out (2). When we change and stage a file using the git add command, we replace its contents in (1) with its new version. The following git commit command will use this Index to create a new snapshot of the working directory.\nSidenote: To reset to the HEAD’s parent commit, we use git reset HEAD~.\n\n\n\n!git reset --hard b20af6721a6a78e3e3077c3c021b345f39f00fac\n!git log --all --graph\n!cat file.txt\n\nfatal: Could not parse object 'b20af6721a6a78e3e3077c3c021b345f39f00fac'.\n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f (HEAD -&gt; main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\nhello world\nhello world changed\nhello world changed 1\nhello world changed 2\n\n\n\nTo complete this level, we create a new branch (using git branch) and then check it out (using git checkout), meaning we tell git to point HEAD to the main branch. This will populate the Index with the commit content where main is pointing and then update the working directory.\n\n\n\nSidenote: we can create a branch and check it out using the command git checkout -b &lt;name-of-branch&gt;.\n\n\n\n!git branch bugFix; git checkout bugFix\n!git log --all --graph\n\nSwitched to branch 'bugFix'\n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f (HEAD -&gt; bugFix, main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n\nLevel 3\n\nBranches allow us to quickly switch between project versions and work on different things in isolation. This removes the possibility of conflicts between the changes made in each thing arising while working on them. We then need to merge these changes together into the main version of the project.\nAt this level, we use the git merge command, which creates a commit with two parents, including both project versions. When we merge two branches, we may need to resolve conflicts between their work.\nTo get to the same stage as the beginning of this level, we would undo and redo what we did in the previous level, so let’s just keep going.\nTo complete this level, we need to commit from the “bugFix” branch, then check out and commit from the “main” branch, and finally merge the commits where each branch is pointing to while in the “main” branch, so this one points to the created merged commit:\n\n\n!echo \"hello world changed 3\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C2\"\n!git log --all --graph\n\n[bugFix 672d6b3] C2\n 1 file changed, 1 insertion(+)\n* commit 672d6b3bfe65331fb1944eaffcfaafb349e33bf2 (HEAD -&gt; bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:44 2024 +0100\n| \n|     C2\n| \n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout main; echo \"hello world changed 4\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C3\"\n!git log --all --graph\n\nSwitched to branch 'main'\n[main af49e06] C3\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n* commit af49e06f42917538d6df2684bda8c654b702f497 (HEAD -&gt; main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:46 2024 +0100\n| \n|     C3\n|   \n| * commit 672d6b3bfe65331fb1944eaffcfaafb349e33bf2 (bugFix)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:44:44 2024 +0100\n|   \n|       C2\n| \n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git merge bugFix -m \"C4\"\n!git log --all --graph\n\nMerge made by the 'ort' strategy.\n file.txt | 1 +\n 1 file changed, 1 insertion(+)\n*   commit 4aa4729a84d7b065474892f9bdc82bc3c090f30c (HEAD -&gt; main)\n|\\  Merge: af49e06 672d6b3\n| | Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| | Date:   Tue Apr 16 11:44:47 2024 +0100\n| | \n| |     C4\n| | \n| * commit 672d6b3bfe65331fb1944eaffcfaafb349e33bf2 (bugFix)\n| | Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| | Date:   Tue Apr 16 11:44:44 2024 +0100\n| | \n| |     C2\n| | \n* | commit af49e06f42917538d6df2684bda8c654b702f497\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:44:46 2024 +0100\n|   \n|       C3\n| \n* commit aa84653c82524cf76c3b0e14604469c4e89c7a2f\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C3\n| \n* commit eadba0c6cff8bebc16b48ae50b09a574eb0c0e37\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:40 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n\nLevel 4\n\nRebasing takes an history of commits and sets their new base commit.\nLet’s get to the same stage as the beginning of this level. To do that we need to reset again while on the main branch, and force delete the bugFix branch:\n\n\n!git reset --hard d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd; git branch -D bugFix; git log --all --graph\n\nHEAD is now at d6f8c4c C1\nDeleted branch bugFix (was 672d6b3).\n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (HEAD -&gt; main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nTo complete this level, we need to create the bugFix branch again, commit in it, move to the main branch, commit in it, move to the bugFix branch, and then use the git rebase command:\n\n\n!git checkout -b bugFix; echo \"Hello world changed 1\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C2\"\n!git checkout main; echo \"Hello world\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C3\"\n!git log --all --graph\n\nSwitched to a new branch 'bugFix'\n[bugFix af1fb02] C2\n 1 file changed, 1 insertion(+)\nSwitched to branch 'main'\n[main 62661e5] C3\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n* commit af1fb0205c749e87a938ce4f2d2343bb248ffc57 (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:00 2024 +0100\n| \n|     C2\n|   \n| * commit 62661e57b270811d8e04f2ab31f1a2c9a45f9414 (HEAD -&gt; main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:00 2024 +0100\n|   \n|       C3\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout bugFix; git rebase main\n!git log --all --graph\n\nSwitched to branch 'bugFix'\nSuccessfully rebased and updated refs/heads/bugFix.\n* commit 78482701d00947592e903cc20ea233c3f053218c (HEAD -&gt; bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:00 2024 +0100\n| \n|     C2\n| \n* commit 62661e57b270811d8e04f2ab31f1a2c9a45f9414 (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:00 2024 +0100\n| \n|     C3\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nThis created a clean linear sequence of commits, making the log/history easier to read.\n\n\n\nLevel 5\n\nHEAD corresponds to the currently checked out commit, i.e., the one we are working on top of. Most git commands that change the Working Tree start by changing HEAD.\nA detached HEAD means that it is attached to a commit instead of a branch.\nTo get to the same stage as this level we need to reset to C1 on both main and bugFix, commit on main and bugFix separately, and commit again on bugFix:\n\n\n!git reset --hard d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n!git checkout main; git reset --hard d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n!echo \"Hello world changed 1\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C2\"\n!git checkout bugFix; echo \"Hello world\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C3\"\n!echo \"Hello world changed\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C4\"\n\nHEAD is now at d6f8c4c C1\nSwitched to branch 'main'\nHEAD is now at d6f8c4c C1\n[main 59e45ed] C2\n 1 file changed, 1 insertion(+)\nSwitched to branch 'bugFix'\n[bugFix a782f63] C3\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n[bugFix 86c2f7d] C4\n 1 file changed, 1 insertion(+)\n\n\n\n!git log --all --graph\n\n* commit 86c2f7df3e7564a65513e7ba0180c7d937453632 (HEAD -&gt; bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C4\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nTo complete this level we need to checkout the commit where bugFix is pointing to, using its ID:\n\n\n!git checkout 86c2f7df3e7564a65513e7ba0180c7d937453632; git log --all --graph\n\nNote: switching to '86c2f7df3e7564a65513e7ba0180c7d937453632'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 86c2f7d C4\n* commit 86c2f7df3e7564a65513e7ba0180c7d937453632 (HEAD, bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C4\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nWe can see that when HEAD was pointing to bugFix git log showed it as (HEAD -&gt; bugFix). Now it shows it as (HEAD, bugFix), so it is not pointing at the branch, but at the commit it self, so it is detached.\n\n\n\nLevel 6\n\nSince commit ids/hashes are relatively big, git only requires us to specify enough characters of that hash until it uniquely identifies that commit. This is still not very convenient, so git provides us relative refs, which allow us to start from somewhere memorable and work from there.\nAt this level, we will use ^ which moves upwards one commit.\nLet’s get to the same stage as the beginning of the level:\n\n\n!git checkout main; git log --all --graph\n\nPrevious HEAD position was 86c2f7d C4\nSwitched to branch 'main'\n* commit 86c2f7df3e7564a65513e7ba0180c7d937453632 (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C4\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (HEAD -&gt; main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nTo complete this level, we need to checkout the parent of bugFix’s commit:\n\n\n!git checkout bugFix^\n\nNote: switching to 'bugFix^'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at a782f63 C3\n\n\n\n!git log --all --graph\n\n* commit 86c2f7df3e7564a65513e7ba0180c7d937453632 (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C4\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd (HEAD)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n\nLevel 7\n\nWe can use the ^ operator several times, such as bugFix^^, to move up several commits. However, we can use the ~ operator which takes a trailing number and, that way, is more convenient.\nOne of the main reasons to use relative refs is to move branches. We can directly reassign a branch to a commit using git branch -f, which forces a branch to move.\n\n\n\nSidenote: In a real git environment this is not allowed for the current checked out branch.\n\n\n\nLet’s get to the same stage as the beginning of the level:\n\n\n!git branch -f bugFix HEAD; git log --all --graph\n\n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd (HEAD, bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (main)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout main; echo \"Hello world changed 2\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C4\"\n!git checkout bugFix; echo \"Hello world changed 1\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C5\"\n!echo \"Hello world changed 2\" &gt;&gt; file1.txt; git add file1.txt; git commit -m \"C6\"\n!git log --all --graph\n\nPrevious HEAD position was a782f63 C3\nSwitched to branch 'main'\n[main 0b253a5] C4\n 1 file changed, 1 insertion(+)\nSwitched to branch 'bugFix'\n[bugFix d2450be] C5\n 1 file changed, 1 insertion(+)\n[bugFix 3806c6c] C6\n 1 file changed, 1 insertion(+)\n* commit 3806c6ce35da4841587ed2272dd1ccd70690b999 (HEAD -&gt; bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C6\n| \n* commit d2450be479728636ea01550c5da0c745376df7bb\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C5\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 0b253a577f03107ebd3a8ea4ca7cf2f62d815b72 (main)\n| | Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| | Date:   Tue Apr 16 11:45:31 2024 +0100\n| | \n| |     C4\n| | \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout main^; git log --all --graph\n\nNote: switching to 'main^'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at 59e45ed C2\n* commit 3806c6ce35da4841587ed2272dd1ccd70690b999 (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C6\n| \n* commit d2450be479728636ea01550c5da0c745376df7bb\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C5\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 0b253a577f03107ebd3a8ea4ca7cf2f62d815b72 (main)\n| | Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| | Date:   Tue Apr 16 11:45:31 2024 +0100\n| | \n| |     C4\n| | \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (HEAD)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nWe need to copy the identifier of commit C6 before unreferencing it (3806c6ce35da4841587ed2272dd1ccd70690b999).\n\n\n!git branch -f bugFix bugFix^; git log --all --graph\n\n* commit d2450be479728636ea01550c5da0c745376df7bb (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C5\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 0b253a577f03107ebd3a8ea4ca7cf2f62d815b72 (main)\n| | Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| | Date:   Tue Apr 16 11:45:31 2024 +0100\n| | \n| |     C4\n| | \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (HEAD)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nTo complete this level we need to point main to C6, HEAD to C1, and bugFix to C0, using relative refs as much as possible:\n\n\n!git branch -f main 3806; git log --all --graph\n\n* commit 3806c6ce35da4841587ed2272dd1ccd70690b999 (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C6\n| \n* commit d2450be479728636ea01550c5da0c745376df7bb (bugFix)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C5\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n|   \n| * commit 59e45ed005c84f2342b98f735737ad2536fa0d05 (HEAD)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:45:08 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout bugFix~2; git branch -f bugFix HEAD^; git log --all --graph\n\nWarning: you are leaving 1 commit behind, not connected to\nany of your branches:\n\n  59e45ed C2\n\nIf you want to keep it by creating a new branch, this may be a good time\nto do so with:\n\n git branch &lt;new-branch-name&gt; 59e45ed\n\nHEAD is now at d6f8c4c C1\n* commit 3806c6ce35da4841587ed2272dd1ccd70690b999 (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C6\n| \n* commit d2450be479728636ea01550c5da0c745376df7bb\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:31 2024 +0100\n| \n|     C5\n| \n* commit a782f6376954bc7fa272ba6227e2bec8389f82cd\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:45:09 2024 +0100\n| \n|     C3\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (HEAD)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770 (bugFix)\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n\nLevel 8\n\nThere are two ways of reversing changes in git, i.e.:\n\ngit reset, which gets back to a specific commit, discarding subsequent ones. Since some of the commit history may vanish, we should not use this for remote changes in repositories that other people use, but in others cases it’s okay.\ngit revert, which creates a new commit that reverses the changes made by a specific commit. This does not remove history, so it is good to reverse changes made in remote branches.\n\nLet’s get to the same stage as the beginning of the level:\n\n\n!git branch -f main HEAD; git branch -D bugFix\n!git log --all --graph\n\nDeleted branch bugFix (was 4abe474).\n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (HEAD, main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout -b pushed; echo \"change\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C2\"\n!git log --all --graph\n\nSwitched to a new branch 'pushed'\n[pushed c2bb6ba] C2\n 1 file changed, 1 insertion(+)\n* commit c2bb6ba7680286da2918097b1cc983d13dd2b452 (HEAD -&gt; pushed)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:49:12 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout main; git checkout -b local; echo \"change\" &gt;&gt; file.txt; git add file.txt; git commit -m \"C3\"\n!git log --all --graph\n\nSwitched to branch 'main'\nSwitched to a new branch 'local'\n[local 32d6b19] C3\n 1 file changed, 1 insertion(+)\n* commit 32d6b190ae74249d46ea0ac1d7a738e816af3b98 (HEAD -&gt; local)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:49:13 2024 +0100\n| \n|     C3\n|   \n| * commit c2bb6ba7680286da2918097b1cc983d13dd2b452 (pushed)\n|/  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n|   Date:   Tue Apr 16 11:49:12 2024 +0100\n|   \n|       C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\nTo complete this level, we need to use the git reset command to reverse the local changes made in the local branch back to main, and git revert to reverse the changes made in the remote branch pushed back to main:\n\n\n!git reset --hard main\n!git log --all --graph\n\nHEAD is now at d6f8c4c C1\n* commit c2bb6ba7680286da2918097b1cc983d13dd2b452 (pushed)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:49:12 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (HEAD -&gt; local, main)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n!git checkout pushed; git revert --no-edit pushed\n!git log --all --graph\n\nSwitched to branch 'pushed'\n[pushed 13b0fb7] Revert \"C2\"\n Date: Tue Apr 16 11:49:16 2024 +0100\n 1 file changed, 1 deletion(-)\n* commit 13b0fb7260d5ea890f570d430706d0bcfcc20e32 (HEAD -&gt; pushed)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:49:16 2024 +0100\n| \n|     Revert \"C2\"\n|     \n|     This reverts commit c2bb6ba7680286da2918097b1cc983d13dd2b452.\n| \n* commit c2bb6ba7680286da2918097b1cc983d13dd2b452\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:49:12 2024 +0100\n| \n|     C2\n| \n* commit d6f8c4ce16a5db9489f3633584a1e149f7c0ddbd (main, local)\n| Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n| Date:   Tue Apr 16 11:44:38 2024 +0100\n| \n|     C1\n| \n* commit 4abe4740bdd9598bd5c7cc79a987dd5f0554c770\n  Author: Afonso Matoso Magalhães &lt;afonsomm98@gmail.com&gt;\n  Date:   Tue Apr 16 11:44:37 2024 +0100\n  \n      C0\n\n\n\n\nLevel 9\n\nThe git cherry-pick command allows us to copy a sequence of specific commits to the current checked out branch.\nLet’s get to the same point as the beginning of the level: TODO …"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Git\n\n\nPratical Git Tutorial.\n\n\n\ncourses\n\n\n\n\n\n\n\n\n\nAfonso Matoso Magalhães\n\n\n\n\n\n\nNo matching items"
  }
]